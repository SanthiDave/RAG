#import csv data into a dataframe, removes missing values

import pandas as pd
df = pd.read_csv('../../top_rated_wines.csv')
df = df[df['variety'].notna()] # remove any NaN values as it blows up serialization
data = df.to_dict('records')
df

--------------------------------------------------------------------------------------------------------
#imports the models submodule from the qdrant_client module. 
This submodule likely contains model definitions used in the Qdrant Client library, such as definitions for records, vectors, collections, etc.
#imports the QdrantClient class from the qdrant_client module. This class is the main interface for interacting with a Qdrant vector database.
#imports the SentenceTransformer class from the sentence_transformers module.
This SentenceTransformer class is part of the sentence_transformers library, which is used for encoding text sentences into fixed-dimensional embeddings. 
This class is commonly used to load pre-trained transformer models that can generate embeddings for input sentences.

from qdrant_client import models, QdrantClient
from sentence_transformers import SentenceTransformer

----------------------------------------------------------------------------------------------------------
#initializes an instance of the SentenceTransformer class with a specific pre-trained model called 'all-MiniLM-L6-v2'
#The instantiated SentenceTransformer object is assigned to the variable encoder. This variable name (encoder) suggests that the object will be used to 
encode (or transform) sentences into fixed-dimensional embeddings.

encoder = SentenceTransformer('all-MiniLM-L6-v2') 
----------------------------------------------------------------------------------------------------------
###creates the vector database client

#instantiates the QdrantClient class. The ":memory:" argument passed to the constructor specifies that the Qdrant database
instance should be created in memory, rather than being stored on disk. This means that the database will exist only for the duration of the program's 
execution and will be destroyed once the program terminates.
#The instantiated QdrantClient object is assigned to the variable qdrant. This variable name (qdrant) suggests that the object will be used to interact 
with the Qdrant vector database. The qdrant object can be used to perform various operations on the Qdrant vector database,
 such as uploading records, searching for nearest neighbors, or managing collections. 

qdrant = QdrantClient(":memory:") # Create in-memory Qdrant instance
-------------------------------------------------------------------------------------------------
### Create collection to store books

# a new collection named "top_wines" will be created in the Qdrant vector database, configured to store book vectors of a specific 
dimensionality and using the cosine distance metric for similarity search.
# qdrant.recreate_collection(): This method is called on the qdrant object to recreate a collection in the Qdrant vector database. 
Recreating a collection means deleting any existing collection with the same name and creating a new empty collection.
# the collection will be named "top_wines".
# vectors_config=models.VectorParams(...): This argument specifies the configuration for the vectors stored in the collection. 
It contains parameters such as the size of the vectors and the distance metric used for similarity search.
# size=encoder.get_sentence_embedding_dimension(): This parameter specifies the size of the vectors to be stored in the collection. 
The size is determined by calling the get_sentence_embedding_dimension() method on the encoder object, which is an instance of the SentenceTransformer class. 
This method returns the dimensionality of the embeddings generated by the encoder object.
# distance=models.Distance.COSINE: This parameter specifies the distance metric to be used for similarity search in the collection. 
In this case, the cosine distance metric is used, which measures the  cosine of the angle between two vectors and is commonly used for 
comparing the similarity of vectors in high-dimensional spaces

qdrant.recreate_collection(
    collection_name="top_wines",
    vectors_config=models.VectorParams(
        size=encoder.get_sentence_embedding_dimension(), # Vector size is defined by used model
        distance=models.Distance.COSINE
    )
)
----------------------------------------------------------------------------------------
###  this code snippet uploads records containing vector embeddings of book notes to the "top_wines" collection in the Qdrant vector database. 
Each record includes a unique identifier (id), the vector embedding of the book notes (vector), and additional metadata or information about the book (payload).
# Note that we use an older way of Qdrant doing the uploads using Records instead of Points
# qdrant.upload_records(): This method is called on the qdrant object to upload records to a collection in the Qdrant vector database.
The records will be uploaded to the "top_wines" collection.
#records=[...]: This argument specifies the records to be uploaded to the collection. It is a list comprehension that generates a list of models.Record objects.
# models.Record(...): Each element of the list comprehension represents a models.Record' object, which contains the following attributes:
	id: The unique identifier for the record, which is assigned the value of idx.
	vector: The vector embedding of the book notes, generated by encoding the text using the encoder object (encoder.encode(doc["notes"])). It is converted to a list using .tolist().
	payload: Additional data associated with the record, which is assigned the value of doc. 
The doc variable likely contains metadata or information about the book.
# enumerate(data): This function iterates over each element in the data variable, providing both the index (idx) and the content (doc). 
# The data variable likely holds information about the books, such as their notes.

qdrant.upload_records(
    collection_name="top_wines",
    records=[
        models.Record(
            id=idx,
            vector=encoder.encode(doc["notes"]).tolist(),
            payload=doc
        ) for idx, doc in enumerate(data) # data is the variable holding all the wines
    ]
)
-------------------------------------------------------------------------------------
# Search time for awesome wines!

# This code snippet performs a search operation on the "top_wines" collection in the Qdrant vector database. It searches for nearest neighbors to the query 
vector, which is the embedding of the sentence "A wine from Mendoza Argentina" encoded using the encoder object.
# qdrant.search(): This method is called on the qdrant object to perform a search operation in the Qdrant vector database.
# collection_name="top_wines": the search will be conducted in the "top_wines" collection.
# query_vector=encoder.encode("A wine from Mendoza Argentina").tolist(): This argument specifies the query vector to search for nearest neighbors. 
It is generated by encoding the text "A wine from Mendoza Argentina" using the encoder object and converting the resulting embedding to a list.
## limit=3: This argument specifies the maximum number of search results to return. 
In this case, it limits the results to the top 3 nearest neighbors.
# After executing the search operation, the search results are stored in the hits variable. Each element of hits represents a search hit, 
containing information about the nearest neighbor and its similarity score.
# Iterating over search hits: This for loop iterates over each search hit in the hits variable.
# Printing search results: For each search hit, it prints the payload (additional data associated with the record) and the similarity score. 
# hit.payload represents the additional data associated with the search hit, and hit.score represents the similarity score of the hit.

hits = qdrant.search(
    collection_name="top_wines",
    query_vector=encoder.encode("A wine from Mendoza Argentina").tolist(),
    limit=3
)
for hit in hits:
  print(hit.payload, "score:", hit.score)